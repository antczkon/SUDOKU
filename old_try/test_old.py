import unittest
import main_old as main


class TestDictDates(unittest.TestCase):

    def test_lengh_of_generated_sudoku(self):
        expected = [9 for i in range(9)]
        result = [len(row) for row in main.generate()]
        self.assertEqual(expected,result)

    def test_given_sudoku_table_and_row_number_check_validity_of_row(self):
        inp
        inp2 = 0

        result = main.check_row(inp,inp2)
        expected = False
        self.assertEqual(expected,result)

    def test_given_sudoku_table_and_row_number_check_validity_of_row_t(self):
        inp
        inp2 = 0

        result = main.check_row(inp,inp2)
        expected = True
        self.assertEqual(expected,result) 

    def test_given_sudoku_table_and_culumn_number_check_validity_of_column(self):
        inp
        inp2 = 0

        result = main.check_column(inp,inp2)
        expected = False
        self.assertEqual(expected, result) 

    def test_given_sudoku_table_and_culumn_number_check_validity_of_column_t(self):
        inp
        inp2 = 0

        result = main.check_column(inp, inp2)
        expected = True
        self.assertEqual(expected, result) 
    
    def test_given_sudoku_table_and_row_and_column_numbers_check_validity_of_square(self):
        inp
        inp2 = 0
        inp3 = 0
        result = main.check_square(inp, inp2, inp3)
        expected = False
        self.assertEqual(expected, result)

    def test_given_sudoku_table_and_row_and_column_numbers_check_validity_of_square_t(self):
        inp
        inp2 = 0
        inp3 = 0
        result = main.check_square(inp, inp2, inp3)
        expected = True
        self.assertEqual(expected, result)
    
    """def test_does_generate_all_candidates_generates_all_candidates(self):
        result = main.generating_all_candidates()
        expected = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        self.assertEqual(expected,result)
    
    def test_picking_random_position(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_pos_row,result_pos_column,result_cand = main.pick_random_candidate(inp, inp1)

        expected_pos_min = 0
        expected_pos_max = 8
        self.assertGreaterEqual(result_pos_row,expected_pos_min)
        self.assertGreaterEqual(result_pos_column, expected_pos_min)
        self.assertLessEqual(result_pos_row,expected_pos_max)
        self.assertLessEqual(result_pos_column,expected_pos_max)

    def test_picking_random_candidate(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_pos_row,result_pos_column,result_cand = main.pick_random_candidate(inp, inp1)

        expected_candidates = inp[result_pos_row][result_pos_column][0]
        self.assertIn(result_cand,expected_candidates)

    def test_if_after_picking_a_candidate_the_position_is_removed_from_passible_ones(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        _,result_passible_positions,result_chosen_pos,result_can = main.eliminate_candidates_after_choice(inp,inp1)

        expect = result_passible_positions
        self.assertNotIn(result_chosen_pos,expect)

    def test_if_after_picking_a_candidate_the_candidate_is_removed_from_passible_ones_for_pos(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_sudoku,result_passible_positions,result_chosen_pos,result_can = main.eliminate_candidates_after_choice(inp,inp1)

        expect_cand_for_pos = result_sudoku[result_chosen_pos[0]][result_chosen_pos[1]][0]
        self.assertEqual([result_can],expect_cand_for_pos)

    def test_if_after_picking_a_candidate_the_candidate_is_removed_from_passible_ones_for_row(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_sudoku,result_passible_positions,result_chosen_pos,result_can = main.eliminate_candidates_after_choice(inp,inp1)
        
        for column in range(9):
            if column != result_chosen_pos[1]:
                expect_cand_for_pos = result_sudoku[result_chosen_pos[0]][column][0]
                self.assertNotIn(result_can,expect_cand_for_pos)

    def test_if_after_picking_a_candidate_the_candidate_is_removed_from_passible_ones_for_col(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_sudoku,result_passible_positions,result_chosen_pos,result_can = main.eliminate_candidates_after_choice(inp,inp1)
        
        for row in range(9):
            if row != result_chosen_pos[0]:
                expect_cand_for_pos = result_sudoku[row][result_chosen_pos[1]][0]
                self.assertNotIn(result_can,expect_cand_for_pos)

    def test_if_after_picking_a_candidate_the_candidate_is_removed_from_passible_ones_for_square(self):
        inp = [[[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]], [[['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']], [['1', '2', '3', '4', '5', '6', '7', '8', '9']]]]
        inp1 = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8]]
        result_sudoku,result_passible_positions,result_chosen_pos,result_can = main.eliminate_candidates_after_choice(inp,inp1)
        begin_check_row=0
        begin_check_column=0
        num_of_row = result_chosen_pos[0]
        num_of_column = result_chosen_pos[1]
        if num_of_row > 5:
            begin_check_row=6
        elif num_of_row > 2:
            begin_check_row=3
        
        if num_of_column > 5:
            begin_check_column=6
        elif num_of_column > 2:
            begin_check_column=3
        
        square = []
        for i in range(begin_check_row,begin_check_row+3):
            for j in range(begin_check_column,begin_check_column+3):
                if i!= result_chosen_pos[0] and j != result_chosen_pos[1]:
                    square.append(result_sudoku[i][j][0])
        for i in range(len(square)):
            self.assertNotIn(result_can,square[i])
    
    def test_if_generated_sudoku_is_filled_with_exactly_one_digit_for_each_pos(self):
        result = main.generate_filled_sudoku()
        for i in range (9):
            for j in range(9):
                self.assertEqual(len(result[i][j][0]),1)
"""